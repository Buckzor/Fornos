#version 430 core
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout (local_size_x = 64) in;

#define BUFFER_PARAMS 3
#define BUFFER_PIXELS 4
#define BUFFER_POSITIONS 12
#define BUFFER_NORMALS 7
#define BUFFER_BVH 8
#define BUFFER_COORDS 9
#define BUFFER_TIDX 10
#define BUFFER_SAMPLES 13
#define BUFFER_RESULTS_ACC 11

#define FLT_MAX 3.402823466e+38

struct Params
{
	uint sampleCount; // Number of rays to sample
	float minDistance;
	float maxDistance;
};

struct Pixel
{
	vec3 p;
	vec3 n;
};

struct BVH
{
	float aabbMinX; float aabbMinY; float aabbMinZ;
	float aabbMaxX; float aabbMaxY; float aabbMaxZ;
	uint start;
	uint end;
	uint jump; // Index to the next BVH if we skip this subtree
};

layout(location = 1) uniform uint pixOffset;
layout(location = 2) uniform uint bvhCount;
layout(location = 14) uniform uint samplePermCount;
layout(std430, binding = BUFFER_PARAMS) readonly buffer paramsBuffer { Params params; };
layout(std430, binding = BUFFER_PIXELS) readonly buffer pixBuffer { Pixel pixels[]; };
layout(std430, binding = BUFFER_POSITIONS) readonly buffer meshPBuffer { vec3 positions[]; };
layout(std430, binding = BUFFER_NORMALS) readonly buffer meshNBuffer { vec3 normals[]; };
layout(std430, binding = BUFFER_BVH) readonly buffer bvhBuffer { BVH bvhs[]; };
layout(std430, binding = BUFFER_COORDS) readonly buffer coordsBuffer { vec4 coords[]; };
layout(std430, binding = BUFFER_TIDX) readonly buffer coordsTidxBuffer { uint coords_tidx[]; };
layout(std430, binding = BUFFER_SAMPLES) readonly buffer samplesBuffer { vec3 samples[]; };
layout(std430, binding = BUFFER_RESULTS_ACC) writeonly buffer resultAccBuffer { float results[]; };

float RayAABB(vec3 o, vec3 d, vec3 mins, vec3 maxs)
{
	vec3 dabs = abs(d);
	//if (dabs.x < 0.0001) d.x = 0.0001;
	//if (dabs.y < 0.0001) d.y = 0.0001;
	//if (dabs.z < 0.0001) d.z = 0.0001;
	vec3 t1 = (mins - o) / d;
	vec3 t2 = (maxs - o) / d;
	vec3 tmin = min(t1, t2);
	vec3 tmax = max(t1, t2);
	float a = max(tmin.x, max(tmin.y, tmin.z));
	float b = min(tmax.x, min(tmax.y, tmax.z));
	return (b >= 0 && a <= b) ? a : FLT_MAX;
}

vec3 barycentric(vec3 p, vec3 a, vec3 b, vec3 c)
{
	vec3 v0 = b - a;
	vec3 v1 = c - a;
	vec3 v2 = p - a;
	float d00 = dot(v0, v0);
	float d01 = dot(v0, v1);
	float d11 = dot(v1, v1);
	float d20 = dot(v2, v0);
	float d21 = dot(v2, v1);
	float denom = d00 * d11 - d01 * d01;
	//if (abs(denom) < 0.00001) return vec3(-1,-1,-1);
	float y = (d11 * d20 - d01 * d21) / denom;
	float z = (d00 * d21 - d01 * d20) / denom;
	return vec3(1.0 - y - z, y, z);
}

// Returns distance (x) + barycentric coordinates (yzw)
float raycast(vec3 o, vec3 d, vec3 a, vec3 b, vec3 c)
{
	vec3 n = normalize(cross(b - a, c - a));
	float nd = dot(d, n);
	if (abs(nd) > 0)
	{
		float pn = dot(o, n);
		float t = (dot(a, n) - pn) / nd;
		if (t >= 0)
		{
			vec3 p = o + d * t;
			vec3 b = barycentric(p, a, b, c);
			if (b.x >= 0 && //b.x <= 1 &&
				b.y >= 0 && b.y <= 1 &&
				b.z >= 0 && b.z <= 1)
			{
				return t;
			}
		}
	}
	return FLT_MAX;
}

float raycastRange(vec3 o, vec3 d, uint start, uint end, float mindist)
{
	float mint = FLT_MAX;
	for (uint tidx = start; tidx < end; tidx += 3)
	{
		vec3 v0 = positions[tidx + 0];
		vec3 v1 = positions[tidx + 1];
		vec3 v2 = positions[tidx + 2];
		float t = raycast(o, d, v0, v1, v2);
		if (t >= mindist && t < mint)
		{
			mint = t;
		}
	}
	return mint;
}

float raycastBVH(vec3 o, vec3 d, float mindist, float maxdist)
{
	float mint = FLT_MAX;
	uint i = 0;
	while (i < bvhCount)
	{
		BVH bvh = bvhs[i];
		vec3 aabbMin = vec3(bvh.aabbMinX, bvh.aabbMinY, bvh.aabbMinZ);
		vec3 aabbMax = vec3(bvh.aabbMaxX, bvh.aabbMaxY, bvh.aabbMaxZ);
		float distAABB = RayAABB(o, d, aabbMin, aabbMax);
		if (distAABB < mint && distAABB < maxdist)
		//if (distAABB != FLT_MAX)
		{
			float t = raycastRange(o, d, bvh.start, bvh.end, mindist);
			if (t < mint)
			{
				mint = t;
			}
			++i;
		}
		else
		{
			i = bvh.jump;
		}
	}

	return mint;
}

// Gets the position from the triangle index and the barycentric coordinates
vec3 getPosition(uint tidx, vec3 bcoord)
{
	vec3 p0 = positions[tidx + 0];
	vec3 p1 = positions[tidx + 1];
	vec3 p2 = positions[tidx + 2];
	return bcoord.x * p0 + bcoord.y * p1 + bcoord.z * p2;
}

vec3 getNormal(uint tidx, vec3 bcoord)
{
	vec3 n0 = normals[tidx + 0];
	vec3 n1 = normals[tidx + 1];
	vec3 n2 = normals[tidx + 2];
	return normalize(bcoord.x * n0 + bcoord.y * n1 + bcoord.z * n2);
}

void main()
{ 
	uint pix_idx = gl_GlobalInvocationID.x / params.sampleCount + pixOffset;
	uint sample_idx = gl_GlobalInvocationID.x % params.sampleCount;

	vec4 coord = coords[pix_idx];
	uint tidx = coords_tidx[pix_idx];
	vec3 o = getPosition(tidx, coord.yzw);
	vec3 d = getNormal(tidx, coord.yzw);

	vec3 ty = normalize(abs(d.x) > abs(d.y) ? vec3(d.z, 0, -d.x) : vec3(0, d.z, -d.y));
	vec3 tx = cross(d, ty);
	uint sidx = (pix_idx % samplePermCount) * params.sampleCount + sample_idx;
	vec3 rs = samples[sidx];
	vec3 sampleDir = normalize(tx * rs.x + ty * rs.y + d * rs.z);

	float t = raycastBVH(o, sampleDir, params.minDistance, params.maxDistance);
	if (t != FLT_MAX && t < params.maxDistance)
	{
		results[gl_GlobalInvocationID.x] = 1;
	}
	else
	{
		results[gl_GlobalInvocationID.x] = 0;
	}
}